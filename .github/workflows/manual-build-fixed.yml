name: Manual APK Build (Fixed)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build Type'
        required: true
        default: 'both'
        type: choice
        options:
          - debug
          - release
          - both
      version_bump:
        description: 'Version Bump'
        required: false
        default: 'none'
        type: choice
        options:
          - none
          - patch
          - minor
          - major
      upload_to_releases:
        description: 'Upload to GitHub Releases'
        required: true
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - build_variant: debug
            enabled: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both' }}
          - build_variant: release
            enabled: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both' }}
        exclude:
          - enabled: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Bump Version
        if: github.event.inputs.version_bump != 'none'
        run: |
          # Read current version with more precise parsing
          CURRENT_VERSION=$(grep -E '^\s*versionName\s' app/build.gradle | sed 's/.*"\([^"]*\)".*/\1/')
          CURRENT_CODE=$(grep -E '^\s*versionCode\s' app/build.gradle | sed 's/.*versionCode\s*\([0-9]*\).*/\1/')
          
          echo "Current version: $CURRENT_VERSION"
          echo "Current version code: $CURRENT_CODE"
          
          # Validate version format
          if [[ ! $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $CURRENT_VERSION"
            exit 1
          fi
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Bump version based on input
          case "${{ github.event.inputs.version_bump }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_CODE=$((CURRENT_CODE + 1))
          
          echo "New version: $NEW_VERSION"
          echo "New version code: $NEW_CODE"
          
          # Update build.gradle with more precise sed commands
          sed -i "s/versionCode $CURRENT_CODE/versionCode $NEW_CODE/" app/build.gradle
          sed -i "s/versionName \"$CURRENT_VERSION\"/versionName \"$NEW_VERSION\"/" app/build.gradle
          
          # Verify the changes
          echo "Verification:"
          grep "versionName\|versionCode" app/build.gradle | head -2
          
          echo "VERSION_NAME=$NEW_VERSION" >> $GITHUB_ENV
          echo "VERSION_CODE=$NEW_CODE" >> $GITHUB_ENV

      - name: Check Required Secrets (Release only)
        if: matrix.build_variant == 'release'
        run: |
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Error: KEYSTORE_BASE64 secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.KEYSTORE_PASSWORD }}" ]; then
            echo "Error: KEYSTORE_PASSWORD secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then
            echo "Error: KEY_ALIAS secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then
            echo "Error: KEY_PASSWORD secret is not set"
            exit 1
          fi
          echo "All required secrets are present"

      - name: Decrypt Keystore (Release only)
        if: matrix.build_variant == 'release'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "Decrypting keystore..."
          echo $KEYSTORE_BASE64 | base64 -d > app/keystore.jks
          echo "Keystore created successfully"
          ls -la app/keystore.jks

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Debug APK
        if: matrix.build_variant == 'debug'
        run: |
          echo "Building debug APK..."
          ./gradlew assembleDebug --stacktrace
          echo "Debug build completed"

      - name: Build Release APK
        if: matrix.build_variant == 'release'
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "Building release APK..."
          ./gradlew assembleRelease --stacktrace
          echo "Release build completed"

      - name: Get Build Info
        id: build_info
        run: |
          if [ "${{ matrix.build_variant }}" = "debug" ]; then
            APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
            BUILD_TYPE="debug"
          else
            APK_PATH="app/build/outputs/apk/release/app-release.apk"
            BUILD_TYPE="release"
          fi
          
          # Get version info with improved parsing
          VERSION_NAME=$(grep -E '^\s*versionName\s' app/build.gradle | sed 's/.*"\([^"]*\)".*/\1/')
          VERSION_CODE=$(grep -E '^\s*versionCode\s' app/build.gradle | sed 's/.*versionCode\s*\([0-9]*\).*/\1/')
          
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          APK_NAME="HandwrittenOCRSumCam-${BUILD_TYPE}-v${VERSION_NAME}-${VERSION_CODE}-${TIMESTAMP}.apk"
          
          echo "APK Path: $APK_PATH"
          echo "APK Name: $APK_NAME"
          echo "Version: $VERSION_NAME ($VERSION_CODE)"
          
          # Verify APK exists
          if [ ! -f "$APK_PATH" ]; then
            echo "Error: APK file not found at $APK_PATH"
            exit 1
          fi
          
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT

      - name: Rename APK
        run: |
          echo "Renaming APK from ${{ steps.build_info.outputs.apk_path }} to ${{ steps.build_info.outputs.apk_name }}"
          mv "${{ steps.build_info.outputs.apk_path }}" "${{ steps.build_info.outputs.apk_name }}"
          ls -la "${{ steps.build_info.outputs.apk_name }}"

      - name: Get APK Size
        id: apk_size
        run: |
          APK_SIZE=$(stat -c%s "${{ steps.build_info.outputs.apk_name }}")
          APK_SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $APK_SIZE / 1024 / 1024}")
          echo "APK size: $APK_SIZE bytes ($APK_SIZE_MB MB)"
          echo "apk_size_bytes=$APK_SIZE" >> $GITHUB_OUTPUT
          echo "apk_size_mb=$APK_SIZE_MB" >> $GITHUB_OUTPUT

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_info.outputs.apk_name }}
          path: ${{ steps.build_info.outputs.apk_name }}
          retention-days: 30

      - name: Create Build Summary
        run: |
          echo "## 📱 APK Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Type** | ${{ steps.build_info.outputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | ${{ steps.build_info.outputs.version_name }} (${{ steps.build_info.outputs.version_code }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **APK Size** | ${{ steps.apk_size.outputs.apk_size_mb }} MB |" >> $GITHUB_STEP_SUMMARY
          echo "| **File Name** | ${{ steps.build_info.outputs.apk_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Trigger** | ${{ github.event.inputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version Bump** | ${{ github.event.inputs.version_bump }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Download Instructions" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the 'Actions' tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll down to 'Artifacts' section" >> $GITHUB_STEP_SUMMARY
          echo "4. Download the APK file" >> $GITHUB_STEP_SUMMARY

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.upload_to_releases == 'true'
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List Downloaded Artifacts
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -name "*.apk" -type f

      - name: Get Build Info
        id: info
        run: |
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./artifacts/**/*.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "manual-build-${{ steps.info.outputs.timestamp }}"
          name: "Manual Build - ${{ steps.info.outputs.timestamp }}"
          body: |
            ## 📱 Manual APK Build
            
            This is a manually triggered build created on demand.
            
            ### 🔧 Build Configuration
            - **Build Type**: ${{ github.event.inputs.build_type }}
            - **Version Bump**: ${{ github.event.inputs.version_bump }}
            - **Triggered By**: @${{ github.actor }}
            - **Commit**: ${{ github.sha }}
            - **Workflow**: manual-build-fixed.yml
            
            ### 📥 Installation Instructions
            1. Download the appropriate APK file below
            2. Enable "Install from unknown sources" in your Android settings
            3. Install the APK file on your device
            
            ### 🔍 Build Types
            - **Release APK**: Optimized for production use, smaller size, signed with release keystore
            - **Debug APK**: Contains debug information, larger size, signed with debug keystore
            
            ### 🛠️ Improvements in This Version
            - Fixed matrix strategy logic
            - Improved version parsing with error handling
            - Added secret validation for release builds
            - Enhanced logging and error reporting
            - Better APK verification
            
            ---
            *Generated automatically by GitHub Actions (Fixed Version)*
          draft: false
          prerelease: true
          overwrite: false