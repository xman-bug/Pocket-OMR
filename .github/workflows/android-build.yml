name: Android Build & Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
          - both

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [debug, release]
        exclude:
          - build_type: ${{ github.event.inputs.release_type == 'debug' && 'release' || 'none' }}
          - build_type: ${{ github.event.inputs.release_type == 'release' && 'debug' || 'none' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decrypt Keystore (Release only)
        if: matrix.build_type == 'release'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo $KEYSTORE_BASE64 | base64 -d > app/keystore.jks

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Debug APK
        if: matrix.build_type == 'debug'
        run: ./gradlew assembleDebug

      - name: Build Release APK
        if: matrix.build_type == 'release'
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew assembleRelease

      - name: Get APK Info
        id: apk_info
        run: |
          if [ "${{ matrix.build_type }}" = "debug" ]; then
            APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
            APK_NAME="HandwrittenOCRSumCam-debug-${{ github.run_number }}.apk"
          else
            APK_PATH="app/build/outputs/apk/release/app-release.apk"
            APK_NAME="HandwrittenOCRSumCam-release-${{ github.run_number }}.apk"
          fi
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT

      - name: Rename APK
        run: |
          mv "${{ steps.apk_info.outputs.apk_path }}" "${{ steps.apk_info.outputs.apk_name }}"

      - name: Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.apk_info.outputs.apk_name }}
          path: ${{ steps.apk_info.outputs.apk_name }}
          retention-days: 30

      - name: Get App Version
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        id: version
        run: |
          VERSION_NAME=$(grep versionName app/build.gradle | sed 's/.*"\(.*\)".*/\1/')
          VERSION_CODE=$(grep versionCode app/build.gradle | sed 's/.*\([0-9]\+\).*/\1/')
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "./artifacts/**/*.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('build-{0}', github.run_number) }}
          name: ${{ startsWith(github.ref, 'refs/tags/') && format('Release {0}', github.ref_name) || format('Build #{0}', github.run_number) }}
          body: |
            ## ðŸ“± APK Downloads
            
            ### Release APK
            - **Signed APK**: Ready for production use
            - **Size**: Optimized with ProGuard
            
            ### Debug APK  
            - **Debug APK**: For testing and development
            - **Size**: Includes debug symbols
            
            ### Installation Instructions
            1. Download the APK file
            2. Enable "Install from unknown sources" in Android settings
            3. Install the APK file
            
            ### Changes
            - Build #${{ github.run_number }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          overwrite: true